<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Access Pointer</title>
  <script src="/static/speedtest.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/heatmap.js/2.0.2/heatmap.min.js"></script>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Outfit:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <style>
    :root {
      --primary: #C70039;
      --primary-dark: #900029;
      --white: #FFFFFF;
      --light-gray: #f8f8f8;
      --gray: #e0e0e0;
      --dark-gray: #888888;
      --border-radius: 16px;
      --box-shadow: 0 4px 12px rgba(199, 0, 57, 0.1);
    }
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Outfit', sans-serif;
    }
    
    body {
      background-color: var(--light-gray);
      color: #333;
      padding: 0;
      max-width: 1600px;
      margin: 0 auto;
    }
    
    /* New navigation bar */
    .navbar {
      background-color: var(--primary);
      color: var(--white);
      padding: 12px 20px;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
      position: sticky;
      top: 0;
      z-index: 100;
    }
    
    .navbar-logo {
      font-size: 1.5rem;
      font-weight: 700;
      color: var(--white);
      text-decoration: none;
      display: flex;
      align-items: center;
    }
    
    .logo-icon {
      margin-right: 8px;
      font-size: 1.2em;
    }
    
    .content-wrapper {
      padding: 20px;
    }
    
    h1, h2 {
      color: var(--primary);
      text-align: center;
      margin-bottom: 1.5rem;
    }
    
    h1 {
      font-size: 2.2rem;
      font-weight: 700;
      margin-top: 1rem;
    }
    
    h2 {
      font-size: 1.8rem;
      font-weight: 600;
      margin-top: 2rem;
    }
    
    .container {
      background-color: var(--white);
      border-radius: var(--border-radius);
      padding: 24px;
      margin-bottom: 2rem;
      box-shadow: var(--box-shadow);
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    
    .container:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 24px rgba(199, 0, 57, 0.15);
    }
    
    .status-container {
      background-color: var(--light-gray);
      border-radius: var(--border-radius);
      padding: 16px;
      margin-bottom: 1.5rem;
      text-align: center;
      border: 1px solid var(--gray);
    }
    
    #status, #speed-test-status, #heatmap-status, #live-dot-status {
      font-size: 1rem;
      line-height: 1.5;
      color: #333;
      margin-bottom: 0.75rem;
    }
    
    button {
      background-color: var(--primary);
      color: var(--white);
      border: none;
      border-radius: 30px;
      padding: 12px 24px;
      font-size: 1rem;
      font-weight: 500;
      cursor: pointer;
      display: block;
      margin: 1.25rem auto;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }
    
    button:before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      transition: all 0.6s ease;
    }
    
    button:hover:before {
      left: 100%;
    }
    
    button:hover {
      background-color: var(--primary-dark);
      transform: translateY(-2px);
      box-shadow: 0 6px 16px rgba(199, 0, 57, 0.3);
    }
    
    button:disabled {
      background-color: var(--dark-gray);
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }
    
    button:disabled:before {
      display: none;
    }
    
    .divider {
      height: 1px;
      background: linear-gradient(90deg, transparent, var(--primary), transparent);
      margin: 2rem auto;
      width: 90%;
      max-width: 600px;
    }
    
    /* The important speed metrics display */
    .speed-metrics {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 16px;
      margin: 1.5rem auto;
      max-width: 600px;
    }
    
    .metric-card {
      background-color: var(--white);
      border-radius: var(--border-radius);
      padding: 20px;
      text-align: center;
      border: 2px solid var(--primary);
      transition: all 0.3s ease;
      box-shadow: var(--box-shadow);
      position: relative;
      overflow: hidden;
    }
    
    .metric-card:after {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: radial-gradient(circle, rgba(199, 0, 57, 0.1) 0%, transparent 70%);
      opacity: 0;
      transition: opacity 0.6s ease;
      pointer-events: none;
    }
    
    .metric-card:hover {
      transform: translateY(-8px);
      box-shadow: 0 12px 24px rgba(199, 0, 57, 0.2);
    }
    
    .metric-card:hover:after {
      opacity: 1;
    }
    
    .metric-value {
      font-size: 2rem;
      font-weight: 700;
      color: var(--primary);
      margin: 0.5rem 0;
      transition: all 0.3s ease;
    }
    
    .metric-card:hover .metric-value {
      transform: scale(1.1);
    }
    
    .metric-label {
      font-size: 1rem;
      font-weight: 500;
      color: #555;
    }
    
    .metric-unit {
      font-size: 0.9rem;
      color: var(--dark-gray);
      transition: all 0.3s ease;
    }
    
    .metric-card:hover .metric-unit {
      color: var(--primary);
    }
    
    /* Heatmap container styling */
/* Heatmap container styling - RESPONSIVE */
#heatmap-container {
  position: relative;
  border: 2px solid var(--primary);
  margin: 20px auto;
  width: 100%;
  max-width: 800px;
  /* Use aspect ratio to maintain proportions based on original floor plan */
  aspect-ratio: 1.25; /* 1500:1200 = 1.25:1 */
  overflow: hidden;
  border-radius: var(--border-radius);
  box-shadow: var(--box-shadow);
  transition: all 0.3s ease;
}
    
    #heatmap-container:hover {
      box-shadow: 0 8px 24px rgba(199, 0, 57, 0.2);
      transform: scale(1.01);
    }
    
    /* For the mobile view, we'll make the heatmap responsive */
    @media (max-width: 1550px) {
      #heatmap-container {
        width: 100%;
        height: 0;
        padding-bottom: 80%;
      }
    }

    @media (max-width: 1550px) {
      #heatmap-container {
        width: 100%;
        height: 0;
        padding-bottom: 80%;
      }
    }
    
    #heatmap-container img {
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border-radius: calc(var(--border-radius) - 2px);
      transition: all 1s ease;
    }
    
    #heatmap-container:hover img {
      filter: brightness(1.05);
    }
    
    #heatmap-canvas {
      display: none;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: calc(var(--border-radius) - 2px);
  z-index: 5;
}
    
    /* Style for the live location dot with animation */
    #live-dot {
      position: absolute;
      width: 12px;
      height: 12px;
      background-color: blue;
      border-radius: 50%;
      border: 2px solid white;
      transform: translate(-50%, -50%);
      display: none;
      z-index: 10;
      box-shadow: 0 0 10px rgba(0, 0, 255, 0.5);
      animation: pulse 2s infinite;
    }
    
    /* Pulse animation for the dot */
    @keyframes pulse {
      0% {
        box-shadow: 0 0 0 0 rgba(0, 0, 255, 0.7);
      }
      70% {
        box-shadow: 0 0 0 10px rgba(0, 0, 255, 0);
      }
      100% {
        box-shadow: 0 0 0 0 rgba(0, 0, 255, 0);
      }
    }
    
    /* Style for out-of-bounds dot */
    #live-dot.out-of-bounds {
      background-color: red;
      animation: pulse-red 2s infinite;
    }
    
    @keyframes pulse-red {
      0% {
        box-shadow: 0 0 0 0 rgba(255, 0, 0, 0.7);
      }
      70% {
        box-shadow: 0 0 0 10px rgba(255, 0, 0, 0);
      }
      100% {
        box-shadow: 0 0 0 0 rgba(255, 0, 0, 0);
      }
    }
    
    /* Loading animation */
    .loading {
      display: inline-block;
      position: relative;
      width: 80px;
      height: 20px;
      margin: 0 auto;
    }
    
    .loading div {
      position: absolute;
      top: 8px;
      width: 13px;
      height: 13px;
      border-radius: 50%;
      background: var(--primary);
      animation-timing-function: cubic-bezier(0, 1, 1, 0);
    }
    
    .loading div:nth-child(1) {
      left: 8px;
      animation: loading1 0.6s infinite;
    }
    
    .loading div:nth-child(2) {
      left: 8px;
      animation: loading2 0.6s infinite;
    }
    
    .loading div:nth-child(3) {
      left: 32px;
      animation: loading2 0.6s infinite;
    }
    
    .loading div:nth-child(4) {
      left: 56px;
      animation: loading3 0.6s infinite;
    }
    
    @keyframes loading1 {
      0% { transform: scale(0); }
      100% { transform: scale(1); }
    }
    
    @keyframes loading2 {
      0% { transform: translate(0, 0); }
      100% { transform: translate(24px, 0); }
    }
    
    @keyframes loading3 {
      0% { transform: scale(1); }
      100% { transform: scale(0); }
    }
    
    @media (max-width: 768px) {
      .navbar {
        padding: 10px 16px;
      }
      
      .content-wrapper {
        padding: 12px;
      }
      
      h1 {
        font-size: 1.8rem;
      }
      
      h2 {
        font-size: 1.5rem;
      }
      
      .container {
        padding: 16px;
      }
      
      .speed-metrics {
        grid-template-columns: 1fr;
      }
      
      button {
        width: 100%;
        max-width: 300px;
      }
    }
  </style>
</head>
<body>
  <nav class="navbar">
    <a href="#" class="navbar-logo">
      <span class="logo-icon"></span>
      Access Pointer
    </a>
  </nav>
  
  <div class="content-wrapper">
    <h1>Find Speeds Near Me</h1>
    
    <div class="container">
      <div class="status-container">
        <p id="status">Requesting location permission...</p>
        <div class="loading"><div></div><div></div><div></div><div></div></div>
      </div>
      
      <button id="run-test-btn" onclick="getLocationAndSpeedTest()">Run Speed Test & Send Location</button>
      
      <div id="metrics-container" class="speed-metrics">
        <div class="metric-card">
          <div class="metric-label">Download</div>
          <div class="metric-value" id="download-value">--</div>
          <div class="metric-unit">Mbps</div>
        </div>
        <div class="metric-card">
          <div class="metric-label">Upload</div>
          <div class="metric-value" id="upload-value">--</div>
          <div class="metric-unit">Mbps</div>
        </div>
        <div class="metric-card">
          <div class="metric-label">Ping</div>
          <div class="metric-value" id="ping-value">--</div>
          <div class="metric-unit">ms</div>
        </div>
        <div class="metric-card">
          <div class="metric-label">Jitter</div>
          <div class="metric-value" id="jitter-value">--</div>
          <div class="metric-unit">ms</div>
        </div>
      </div>
      
      <div class="status-container">
        <p id="speed-test-status">Ready to start test</p>
      </div>
    </div>

    <div class="divider"></div>

    <h2>WiFi Speed Heatmap</h2>
    <div class="container">
      <div id="heatmap-container">
        <img src="/static/Floor1.png" alt="Floor Plan">
        <div id="heatmap-canvas"></div>
        <div id="live-dot"></div>
      </div>
      
      <button id="refresh-heatmap-btn" onclick="renderHeatmap()">Refresh Heatmap</button>
      
      <div class="status-container">
        <p id="heatmap-status">Ready to load heatmap</p>
        <p id="live-dot-status">Live location: waiting for data</p>
      </div>
    </div>
  </div>

  <script>
    // --- Global Variables ---
    const session_id = crypto.randomUUID(); // Unique ID for this browser session
    let testInProgress = false;            // Flag to prevent overlapping tests
    let heatmapInstance = null;           // Stores the heatmap.js object
    let liveDotElement = null;           // Stores reference to the live dot HTML element
    let liveLocationInterval = null;    // Stores the ID for the live location fetching interval
    let runTestButton = null;           // Reference to the button
    let autoTestInterval = null;        // Stores the ID for the automatic test interval
    let loadingElements = document.querySelectorAll('.loading');
    
    // Store dimensions for the client
    let clientDimensions = {
      width: window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth,
      height: window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight,
      screen: {
        width: window.screen.width,
        height: window.screen.height
      }
    };

    // --- Send client dimensions to server ---
    function sendClientDimensions() {
      // Get heatmap container dimensions
      const heatmapContainer = document.getElementById('heatmap-container');
      const containerRect = heatmapContainer.getBoundingClientRect();
      
      // Update client dimensions
      clientDimensions.container = {
        width: containerRect.width,
        height: containerRect.height
      };
      
      // Log dimensions for debugging
      console.log("Client dimensions:", clientDimensions);
      
      // Send to server
      fetch('/set-client-dimensions', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          session_id: session_id,
          dimensions: clientDimensions
        })
      })
      .then(response => response.json())
      .then(data => {
        console.log("Dimensions saved on server:", data);
      })
      .catch(error => {
        console.error("Error sending dimensions:", error);
      });
    }

    // --- Update dimensions on resize ---
    function updateDimensions() {
      clientDimensions.width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
      clientDimensions.height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
      
      const heatmapContainer = document.getElementById('heatmap-container');
      const containerRect = heatmapContainer.getBoundingClientRect();
      clientDimensions.container = {
        width: containerRect.width,
        height: containerRect.height
      };
      
      sendClientDimensions();
    }

    // --- Update Metric Display Function ---
    function updateMetricDisplay(download, upload, ping, jitter) {
      document.getElementById('download-value').innerText = download === "Fail" ? "--" : parseFloat(download || 0).toFixed(1);
      document.getElementById('upload-value').innerText = upload === "Fail" ? "--" : parseFloat(upload || 0).toFixed(1);
      document.getElementById('ping-value').innerText = ping === "Fail" ? "--" : parseFloat(ping || 0).toFixed(0);
      document.getElementById('jitter-value').innerText = jitter === "Fail" ? "--" : parseFloat(jitter || 0).toFixed(0);
    }

    // --- Toggle Loading Animation ---
    function toggleLoading(isLoading) {
      loadingElements.forEach(el => {
        el.style.display = isLoading ? 'inline-block' : 'none';
      });
    }

    // Hide loading initially
    window.addEventListener('DOMContentLoaded', () => {
      toggleLoading(false);
    });

    // --- Heatmap Rendering Function ---
    function renderHeatmap() {
      console.log("Attempting to render heatmap...");
      document.getElementById('heatmap-status').innerText = 'Loading heatmap data...';
      toggleLoading(true);

      // Get the current dimensions of the heatmap container
      const heatmapContainer = document.getElementById('heatmap-container');
      const containerRect = heatmapContainer.getBoundingClientRect();
      const containerWidth = containerRect.width;
      const containerHeight = containerRect.height;

      console.log(`Heatmap container dimensions: ${containerWidth}px × ${containerHeight}px`);
      
      // Update client dimensions with current container size
      clientDimensions.container = {
        width: containerWidth,
        height: containerHeight
      };
      
      // Send updated dimensions
      sendClientDimensions();
      
      // Initialize or recreate heatmap instance with current dimensions
      try {
        // Remove previous heatmap canvas if it exists
        const heatmapCanvas = document.getElementById('heatmap-canvas');
        while (heatmapCanvas.firstChild) {
          heatmapCanvas.removeChild(heatmapCanvas.firstChild);
        }
            
        // Create new heatmap instance
        heatmapInstance = h337.create({
          container: heatmapCanvas,
          radius: Math.max(30, Math.min(containerWidth, containerHeight) / 15), // Responsive radius
          maxOpacity: 0.7,
          minOpacity: 0.15,
          blur: 1,
          gradient: { '0':'#0000FF', '0.25':'#00FFFF', '0.5':'#FFFFFF', '0.75':'#FFFF00', '1.0':'#FF0000' }
        });
        console.log("Heatmap instance initialized with responsive settings.");
      } catch (e) {
        document.getElementById('heatmap-status').innerText = 'Error initializing heatmap library.';
        console.error("Heatmap init error:", e);
        toggleLoading(false);
        return;
      }

      // Fetch heatmap data from the backend
      fetch(`/heatmap-data?session_id=${session_id}`)
        .then(response => {
          if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); }
          return response.json();
        })
        .then(heatmapData => {
          // Handle potential errors returned from the backend
          if (heatmapData.error) {
            document.getElementById('heatmap-status').innerText = `Error loading heatmap data: ${heatmapData.error}`;
            console.error('Server error fetching heatmap data:', heatmapData.error);
            heatmapInstance.setData({ max: 0, data: [] }); // Clear heatmap on error
            toggleLoading(false);
            return;
          }
                
          // Validate the received data structure
          if (!heatmapData || typeof heatmapData.max === 'undefined' || !Array.isArray(heatmapData.data)) {
            document.getElementById('heatmap-status').innerText = 'Invalid data format received from server.';
            console.error('Invalid heatmap data format:', heatmapData);
            heatmapInstance.setData({ max: 0, data: [] }); // Clear invalid data
            toggleLoading(false);
            return;
          }

          // Update heatmap with data or clear if no data points
          if (heatmapData.data.length === 0) {
            document.getElementById('heatmap-status').innerText = 'No heatmap data points available yet.';
            heatmapInstance.setData({ max: 0, data: [] }); // Clear if no data
          } else {
            // Points should already be scaled on the server side
            heatmapInstance.setData(heatmapData); // Set the data points
            document.getElementById('heatmap-status').innerText = 
              `Heatmap updated (${heatmapData.data.length} points). Max speed: ${Number(heatmapData.max).toFixed(2)} Mbps`;
          }
          toggleLoading(false);
        })
        .catch(error => {
          // Handle network errors or JSON parsing errors
          document.getElementById('heatmap-status').innerText = 'Failed to fetch or process heatmap data.';
          console.error('Error fetching/processing heatmap data:', error);
          if (heatmapInstance) {
            heatmapInstance.setData({ max: 0, data: [] }); // Clear heatmap on fetch error
          }
          toggleLoading(false);
        });
    }

    // --- Function to Update Live Dot Position & Color ---
    function updateLiveDotPosition() {
      // Get the dot element reference if we don't have it
      if (!liveDotElement) {
        liveDotElement = document.getElementById('live-dot');
        // If it still can't be found, stop trying
        if (!liveDotElement) {
          console.error("Live dot element not found! Stopping updates.");
          if (liveLocationInterval) clearInterval(liveLocationInterval);
          return;
        }
      }
      
      const liveDotStatus = document.getElementById('live-dot-status');
      const heatmapContainer = document.getElementById('heatmap-container');
      const containerRect = heatmapContainer.getBoundingClientRect();
      
      // Update container dimensions if changed
      if (clientDimensions.container.width !== containerRect.width || 
          clientDimensions.container.height !== containerRect.height) {
        clientDimensions.container = {
          width: containerRect.width,
          height: containerRect.height
        };
        // Send updated dimensions
        sendClientDimensions();
      }

      // Fetch the latest live location from the backend
      fetch(`/get-live-location/${session_id}`)
        .then(response => {
          if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); }
          return response.json();
        })
        .then(locationData => {
          // Check if location was found and successfully mapped
          if (locationData && locationData.found === true && locationData.x !== undefined && locationData.y !== undefined) {
            // Coordinates should be pre-scaled for our container on the server
            let xPos = locationData.x;
            let yPos = locationData.y;
                    
            // Position the dot
            liveDotElement.style.left = `${xPos}px`;
            liveDotElement.style.top = `${yPos}px`;

            // Set color and status based on whether the original point was in bounds
            if (locationData.in_bounds) {
              liveDotElement.style.backgroundColor = 'blue';
              liveDotElement.classList.remove('out-of-bounds');
              if(liveDotStatus) liveDotStatus.innerText = `Live location: (${Math.round(locationData.orig_x)}, ${Math.round(locationData.orig_y)}) [In Bounds]`;
            } else {
              liveDotElement.style.backgroundColor = 'red';
              liveDotElement.classList.add('out-of-bounds');
              if(liveDotStatus) liveDotStatus.innerText = `Live location: (${Math.round(locationData.orig_x)}, ${Math.round(locationData.orig_y)}) [OUT OF BOUNDS]`;
            }
            // Make the dot visible
            liveDotElement.style.display = 'block';
          } else {
            // Hide the dot if location data isn't available or mapping failed
            liveDotElement.style.display = 'none';
            if(liveDotStatus) liveDotStatus.innerText = `Live location not available (${locationData.reason || 'unknown reason'}).`;
          }
        })
        .catch(error => {
          // Handle errors during the fetch
          console.error('Error fetching live location:', error);
          if (liveDotElement) liveDotElement.style.display = 'none'; // Hide dot on error
          if(liveDotStatus) liveDotStatus.innerText = 'Error updating live location.';
        });
    }

    // --- Resize handler for responsive updates ---
    let resizeTimeout;
    window.addEventListener('resize', function() {
      // Debounce the resize event to avoid excessive updates
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(function() {
        // Update dimensions and send to server
        updateDimensions();
        
        // Re-render heatmap with updated container dimensions
        if (heatmapInstance) {
          renderHeatmap();
        }
      }, 250); // Wait for 250ms after resizing stops
    });

    // --- Geolocation Permission Request ---
    function requestAndStoreLocation() {
      toggleLoading(true);
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          () => { 
            document.getElementById("status").innerHTML = "Location permission granted!";
            toggleLoading(false);
          },
          showError,
          { enableHighAccuracy: true } // Request high accuracy
        );
      } else {
        document.getElementById("status").innerHTML = "Geolocation is not supported by this browser.";
        toggleLoading(false);
      }
    }

    // --- Speed Test and Location Saving Logic ---
    function getLocationAndSpeedTest(isAuto = false) {
      if (testInProgress) {
        console.warn("Test already in progress. Skipping " + (isAuto ? "automatic" : "manual") + " run.");
        return;
      }
      testInProgress = true;
      toggleLoading(true);
      
      if (runTestButton) {
          runTestButton.disabled = true;
      }
      
      console.log("Starting " + (isAuto ? "automatic" : "manual") + " speed test...");
      document.getElementById("speed-test-status").innerHTML = "Starting test...";
      document.getElementById("status").innerHTML = "Getting current location for test...";

      // 1. Generate unique ID for this specific test run
      fetch(`/generate_unique_id?session_id=${session_id}`)
        .then(res => { if (!res.ok) throw new Error(`Generate ID error: ${res.statusText || res.status}`); return res.json(); })
        .then(data => {
          if (!data.id) throw new Error("Failed to get unique ID from server.");
          const uniqueId = data.id;
          console.log("Generated Unique ID for test:", uniqueId);

          // 2. Run Speed Test using speedtest.js
          const s = new Speedtest();
          s.setParameter("telemetry_level", "basic"); // Or "disabled"
          s.setParameter("time_dl", 10); // Duration for download test (seconds)
          s.setParameter("time_ul", 5);  // Duration for upload test (seconds)
          s.setSelectedServer({ // Configure server endpoints (relative to Flask app)
            name: "Local Server",
            server: window.location.origin + "/", // Base URL of Flask app
            dlURL: "backend/garbage",
            ulURL: "backend/empty",
            pingURL: "backend/empty",
            getIpURL: "backend/getIP"
          });

          let latestData = null;
          // Update speed status during test
          s.onupdate = function (data) {
            latestData = data;
            // Update the status text
            document.getElementById("speed-test-status").innerHTML =
              `Download: ${data.dlStatus} Mbps<br>` +
              `Upload: ${data.ulStatus} Mbps<br>` +
              `Ping: ${data.pingStatus} ms<br>` +
              `Jitter: ${data.jitterStatus} ms`;
              
            // Update the cards
            updateMetricDisplay(data.dlStatus, data.ulStatus, data.pingStatus, data.jitterStatus);
          };

          // When speed test ends
          s.onend = function (aborted) {
            if (aborted) {
                document.getElementById("speed-test-status").innerHTML += "<br>Test aborted.";
                // Re-enable button and allow new tests
                testInProgress = false;
                if (runTestButton) runTestButton.disabled = false;
                toggleLoading(false);
                return;
            }
            if (!latestData) {
                document.getElementById("speed-test-status").innerHTML += "<br>Speed test finished but failed to get data.";
                // Re-enable button and allow new tests
                testInProgress = false;
                if (runTestButton) runTestButton.disabled = false;
                toggleLoading(false);
                return;
            }
            latestData.aborted = aborted;
            console.log("Speed test ended:", latestData);

            // 3. Submit speed results to backend
            // Convert "Fail" strings to 0 or handle appropriately
            const speedPayload = {
                dlStatus: latestData.dlStatus === "Fail" ? 0 : parseFloat(latestData.dlStatus || 0),
                ulStatus: latestData.ulStatus === "Fail" ? 0 : parseFloat(latestData.ulStatus || 0),
                pingStatus: latestData.pingStatus === "Fail" ? 0 : parseFloat(latestData.pingStatus || 0),
                jitterStatus: latestData.jitterStatus === "Fail" ? 0 : parseFloat(latestData.jitterStatus || 0),
                clientIp: latestData.clientIp, // Assuming clientIp is always a string
                testState: latestData.testState,
                aborted: aborted,
                session_id: session_id // Include session ID
            };

            fetch("/submit-speed", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(speedPayload)
            })
            .then(res => { if (!res.ok) throw new Error(`Submit speed error: ${res.statusText || res.status}`); return res.json(); })
            .then(speedSubmitResult => {
               console.log("Speed results submitted:", speedSubmitResult);
               // 4. Send location data associated with this test run AFTER speed submit is successful
               // Pass uniqueId
               sendLocation(uniqueId);
            })
            .catch(err => {
              document.getElementById("speed-test-status").innerHTML += "<br>Error submitting speed results.";
              console.error("Submit speed error:", err);
              // Re-enable button and allow new tests even if submit fails
              testInProgress = false;
              if (runTestButton) runTestButton.disabled = false;
              toggleLoading(false);
            });
          };

          // Start the speed test
          s.start();
        })
        .catch(err => {
            // Handle errors in generating the unique ID
            document.getElementById("speed-test-status").innerHTML = "Error starting test process.";
            console.error("Generate ID error:", err);
            // Re-enable button and allow new tests if ID generation fails
            testInProgress = false;
            if (runTestButton) runTestButton.disabled = false;
            toggleLoading(false);
        });
    }

    // --- Send Specific Test Location to Backend ---
    function sendLocation(uniqueId) {
      console.log("Attempting to send location for test ID:", uniqueId);
      document.getElementById("status").innerHTML = "Sending location data for test...";

      // Get current position for this specific test save
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const lat = position.coords.latitude;
          const long = position.coords.longitude;
          document.getElementById("status").innerHTML = `Location Found: Lat ${lat.toFixed(6)}, Lon ${long.toFixed(6)}`;

          // Send location data with the unique test ID
          fetch("/save_location", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              latitude: lat,
              longitude: long,
              session_id: session_id, // Include session ID for context if needed
              id: uniqueId,         // Send the correct ID associated with the speed test
              dimensions: clientDimensions // Send current client dimensions
            })
          })
          .then(res => { if (!res.ok) throw new Error(`Save location error: ${res.statusText || res.status}`); return res.json(); })
          .then(locationResult => {
              console.log("Location saved for test ID:", locationResult);
              document.getElementById("status").innerHTML += `<br>Location & Speed Test saved (ID: ${uniqueId}).`;
              renderHeatmap(); // Refresh heatmap after saving new test data
          })
          .catch(err => {
              document.getElementById("status").innerHTML += "<br>Error saving location data for test.";
              console.error("Save location error:", err);
          })
          .finally(() => {
            // Mark test as complete and re-enable button AFTER location save attempt
            testInProgress = false;
            if (runTestButton) runTestButton.disabled = false;
            toggleLoading(false);
          });
        },
        (err) => {
          // Handle errors getting location for the test save
          showError(err);
          document.getElementById("status").innerHTML += "<br>Could not get location for saving.";
          console.error("Get location for save error:", err);
          // Allow retrying test even if location save fails, re-enable button
          testInProgress = false;
          if (runTestButton) runTestButton.disabled = false;
          toggleLoading(false);
        },
        { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 } // Options for getting fresh location
      );
    }

    // --- Background Location Update (Sends data for live tracking) ---
    function startRealTimeLocationUpdates() {
      console.log("Starting background location updates (every 1s)");
      // Set interval to send location updates periodically
      setInterval(() => {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            // Send current location to the /save_user_location endpoint
            fetch("/save_user_location", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                latitude: position.coords.latitude,
                longitude: position.coords.longitude,
                session_id: session_id, // Send the session ID
                dimensions: clientDimensions // Send current client dimensions
              })
            }).catch(err => console.warn("Background location send failed:", err)); // Log but don't stop interval
          },
          err => console.warn("Real-time location background update error:", err), // Log errors
          { enableHighAccuracy: true, timeout: 5000 } // Use high accuracy, add timeout
        );
      }, 1000); // Send update every 1 second
    }

    // --- Geolocation Error Display Function ---
    function showError(error) {
      let message = "";
      switch (error.code) {
        case error.PERMISSION_DENIED: message = "Location permission denied."; break;
        case error.POSITION_UNAVAILABLE: message = "Location unavailable."; break;
        case error.TIMEOUT: message = "Location request timed out."; break;
        default: message = "An unknown location error occurred.";
      }
      console.error("Geolocation Error:", error.code, message);
      document.getElementById("status").innerHTML = "Error: " + message;
      toggleLoading(false);
    }

    // --- Initial Setup on Page Load ---
    window.onload = function () {
      console.log("Window loaded. Initializing application...");
      runTestButton = document.getElementById('run-test-btn'); // Get button reference
      liveDotElement = document.getElementById('live-dot'); // Get reference to the dot element
      loadingElements = document.querySelectorAll('.loading'); // Get all loading elements
      
      // Add entrance animations to containers
      const containers = document.querySelectorAll('.container');
      containers.forEach((container, index) => {
        container.style.opacity = '0';
        container.style.transform = 'translateY(30px)';
        container.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
        
        setTimeout(() => {
          container.style.opacity = '1';
          container.style.transform = 'translateY(0)';
        }, 300 + (index * 150));
      });
      
      // Log screen and window dimensions
      console.log("Screen size:", window.screen.width, "x", window.screen.height);
      console.log("Window size:", window.innerWidth, "x", window.innerHeight);
      
      // Capture initial container dimensions and send to server
      setTimeout(() => {
        updateDimensions();
        
        // Now that dimensions are sent, proceed with initialization
        requestAndStoreLocation();       // Request permission
        startRealTimeLocationUpdates();  // Start sending background location updates
        
        // Render heatmap after a short delay to ensure container is fully rendered
        setTimeout(() => {
          renderHeatmap();              // Render initial heatmap
        }, 500);
        
        // Start polling for the live location periodically
        liveLocationInterval = setInterval(updateLiveDotPosition, 1000); // Fetch & update dot every 1s
        
        // Start automatic speed test interval (every 60 seconds)
        console.log("Setting up automatic speed test every 60 seconds.");
        autoTestInterval = setInterval(() => {
          getLocationAndSpeedTest(true);
        }, 60000); // 60000 ms = 1 minute
      }, 300); // Short delay to ensure DOM is ready
    };
  </script>
</body>
</html>
